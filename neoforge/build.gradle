buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
        maven {
            name = 'NeoForged'
            url = 'https://maven.neoforged.net/releases'
        }
    }
    dependencies {
        classpath group: 'com.modrinth.minotaur', name: 'Minotaur', version: '2.+'
    }
}
plugins {
    id 'java-library'
    id 'eclipse'
    id 'idea'
    id 'java'
    id 'maven-publish'
    id 'net.neoforged.moddev'
    id 'net.darkhax.curseforgegradle' version '1.+'
}

apply plugin: "com.modrinth.minotaur"

version = "${project.version}-${project.minecraft_version}"
group = project.group_id
archivesBaseName = "${project.base_name}" + "-neoforge"

// Disables Gradle's custom module metadata from being published to maven. The
// metadata includes mapped dependencies which are not reasonably consumable by
// other mod developers.
tasks.withType(GenerateModuleMetadata) {
    enabled = false
}

neoForge {
    version = neoforge_version
    // Automatically enable neoforge AccessTransformers if the file exists
    def at = project(':common').file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers.add(at.absolutePath)
    }
    addModdingDependenciesTo(sourceSets["test"])
    parchment {
        minecraftVersion = mappings_mc_version
        mappingsVersion = mappings_date
    }
    runs {
        configureEach {
//            systemProperty('neoforge.enabledGameTestNamespaces', mod_id)
            ideName = "NeoForge ${it.name.capitalize()} (${project.path})" // Unify the run config names with fabric
            jvmArgument("-Dmixin.debug.export=true")
        }
        client {
            client()
            gameDirectory = project.file('run/client')
        }
        server {
            server()
            gameDirectory = project.file("run/server")
        }
    }
    mods {
        "${mod_id}" {
            sourceSet sourceSets.main
        }
    }
}


sourceSets.main.resources.srcDir 'src/generated/resources'

dependencies {
    compileOnly project(":common")
}

tasks.withType(JavaCompile).configureEach {
    source(project(":common").sourceSets.main.allSource)
    options.encoding = "UTF-8"
}

tasks.withType(Javadoc).configureEach {
    source(project(":common").sourceSets.main.allJava)
}

tasks.named("sourcesJar", Jar) {
    from(project(":common").sourceSets.main.allSource)
}


processResources {
    from project(":common").sourceSets.main.resources
}

jar {
    dependsOn 'processDocs'
    manifest {
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : project.group_id,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : project.group_id,
                "Implementation-Timestamp": getDate(),
        ])
    }
}

task processDocs(type: Copy) {
    // update docs
    from(file("$rootDir/doc/")) {
        include '*.html'
        expand 'version': project.version,
                'date': getDate(),
                'mcversion': project.minecraft_version,
                'loaderversion': project.neoforge_version,
                'loadername': "NeoForge"
    }
    into "$project.buildDir/doc"
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version
            artifact jar

            artifact project.sourcesJar {
                archiveClassifier.set("sources")
            }

            artifact project.javadocJar {
                archiveClassifier.set("javadoc")
            }
        }
    }
    repositories {
        maven {
            name = "CommonNetworking"
            url = uri("https://jm.gserv.me/repository/maven-releases/")

            credentials {
                username = project.findProperty("deploy.user") ?: System.getenv("DEPLOY_USER")
                password = project.findProperty("deploy.password") ?: System.getenv("DEPLOY_PASSWORD")
            }
        }
    }
}

// Automated upload to CurseForge for the win!
if (!project.hasProperty("curseForgeApiKey")) {
    ext.curseForgeApiKey = project.findProperty("curseforge_api_key") ?: "notset"
}
if (!project.hasProperty("modrinthApiKey")) {
    ext.modrinthApiKey = project.findProperty("modrinth_api_key") ?: "notset"
}

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {

    apiToken = "${curseForgeApiKey}"
    def mainFile = upload(curseforge_project_id, jar)
    mainFile.displayName = "${archivesBaseName}-${version}"
    mainFile.releaseType = release_type
    mainFile.addModLoader("NeoForge")
    mainFile.addJavaVersion("Java 21")
    mainFile.addGameVersion("${project.minecraft_version}")
    mainFile.changelogType = "html"
    mainFile.changelog = file("$project.buildDir/doc/changelog.html")
}

tasks.modrinth.dependsOn(tasks.build)

modrinth {
    token = "${modrinthApiKey}"
    projectId = modrinth_project_id
    versionNumber = "${version}"
    versionName = "${archivesBaseName}-${version}"
    versionType = release_type
    uploadFile = jar
    gameVersions = ["${project.minecraft_version}"]
    loaders = ["neoforge"]
    changelog = file("$project.buildDir/doc/changelog.html").exists() ? file("$project.buildDir/doc/changelog.html").text : null
}

// Ensure build is done prior to cursegradle tasks
project.afterEvaluate {
    project.tasks.findAll { task ->
        (task.name.startsWith('curseforge') || task.name.startsWith('modrinth'))
                && (task.name != 'curseforge' || task.name != 'modrinth')
    }.each { projectTask ->
        projectTask.dependsOn build
    }
}
