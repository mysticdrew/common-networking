buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }

    dependencies {
        classpath group: 'com.modrinth.minotaur', name: 'Minotaur', version: '2.+'
    }
}

plugins {
    id 'fabric-loom' version '1.2-SNAPSHOT'
    id 'maven-publish'
    id 'idea'
    id 'net.darkhax.curseforgegradle' version '1.+'
}

apply plugin: "com.modrinth.minotaur"


version = "${project.version}-${project.minecraft_version}"
group = project.group_id
archivesBaseName = "${project.base_name}" + "-fabric"

// Disables Gradle's custom module metadata from being published to maven. The
// metadata includes mapped dependencies which are not reasonably consumable by
// other mod developers.
tasks.withType(GenerateModuleMetadata) {

    enabled = false
}

dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}"

    compileOnly group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.1'

    compileOnly project(":common")
}

loom {
    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

jar {
    dependsOn 'processDocs'
    manifest {
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : project.group_id,
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${archiveVersion}",
                "Implementation-Vendor"   : project.group_id,
                "Implementation-Timestamp": getDate()
        ])
    }
}

task processDocs(type: Copy) {
    // update docs
    from(file("$rootDir/doc/")) {
        include '*.html'
        expand 'version': project.version,
                'date': getDate(),
                'mcversion': project.minecraft_version,
                'loaderversion': project.fabric_version,
                'loadername': "Fabric"
    }
    into "$project.buildDir/doc"
}

processResources {
    from project(":common").sourceSets.main.resources
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

tasks.withType(JavaCompile) {
    source(project(":common").sourceSets.main.allSource)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId project.group
            artifactId project.archivesBaseName
            version project.version

            from(components["java"])
        }
    }

    repositories {
        maven {
            name = "CommonNetworking"
            url = uri("https://jm.gserv.me/repository/maven-releases/")

            credentials {
                username = project.findProperty("deploy.user") ?: System.getenv("DEPLOY_USER")
                password = project.findProperty("deploy.password") ?: System.getenv("DEPLOY_PASSWORD")
            }
        }
    }
}

if (!project.hasProperty("curseForgeApiKey")) {
    ext.curseForgeApiKey = "notset"
}
if (!project.hasProperty("modrinthApiKey")) {
    ext.modrinthApiKey = "notset"
}

task publishCurseForge(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {

    apiToken = "${curseForgeApiKey}"
    def mainFile = upload(curseforge_project_id, remapJar)
    mainFile.displayName = "${archivesBaseName}-${version}"
    mainFile.releaseType = release_type
    mainFile.addModLoader("Fabric", "Quilt")
    mainFile.addJavaVersion("Java 17")
    mainFile.addGameVersion("${project.minecraft_version}")
    mainFile.changelogType = "html"
    mainFile.changelog = file("$project.buildDir/doc/changelog.html")
}


tasks.modrinth.dependsOn(tasks.build)

modrinth {
    token = "${modrinthApiKey}"
    projectId = "HIuqnQpi"
    versionNumber = "${version}"
    versionName = "${archivesBaseName}-${version}"
    versionType = release_type
    uploadFile = remapJar
    gameVersions = ["${project.minecraft_version}"]
    loaders = ["fabric", "quilt"]
    changelog = file('/build/doc/changelog.html').exists() ? file('/build/doc/changelog.html').text : null
}
