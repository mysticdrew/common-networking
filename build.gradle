plugins {
    id 'net.neoforged.moddev' version '1.0.11' apply false
}


subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    java.toolchain.languageVersion = JavaLanguageVersion.of(21)
    java.withSourcesJar()
    java.withJavadocJar()

    jar {
        manifest {
            attributes([
                    'Specification-Title'     : mod_name,
                    'Specification-Vendor'    : mod_author,
                    'Specification-Version'   : project.jar.archiveVersion,
                    'Implementation-Title'    : project.name,
                    'Implementation-Version'  : project.jar.archiveVersion,
                    'Implementation-Vendor'   : mod_author,
                    'Implementation-Timestamp': getDate().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                    'Timestamp'               : System.currentTimeMillis(),
                    'Built-On-Java'           : "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
                    'Built-On-Minecraft'      : minecraft_version
            ])
        }
    }

    repositories {

        mavenCentral()

        maven {
            name = 'Sponge / Mixin'
            url = 'https://repo.spongepowered.org/repository/maven-public/'
        }

        maven {
            name = 'BlameJared Maven (CrT / Bookshelf)'
            url = 'https://maven.blamejared.com'
        }
        maven {
            name 'Maven for PR #794' // https://github.com/neoforged/NeoForge/pull/794
            url 'https://prmaven.neoforged.net/NeoForge/pr794'
            content {
                includeModule('net.neoforged', 'testframework')
                includeModule('net.neoforged', 'neoforge')
            }
        }
    }

    tasks.withType(JavaCompile).configureEach {

        it.options.encoding = 'UTF-8'
        it.options.getRelease().set(21)
    }

    tasks.withType(Javadoc).configureEach {
        source(project(":common").sourceSets.main.allJava)
    }

    tasks.named("sourcesJar", Jar) {
        from(project(":common").sourceSets.main.allSource)
    }

    // Disables Gradle's custom module metadata from being published to maven. The
    // metadata includes mapped dependencies which are not reasonably consumable by
    // other mod developers.
    tasks.withType(GenerateModuleMetadata) {

        enabled = false
    }
}

def getDate() {
    def date = new Date()
    def formattedDate = date.format(project.dateFormat)
    return formattedDate
}
